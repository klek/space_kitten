# <type>: <subject> (see types below)
# |<----  Using a Maximum Of 50 Characters  ---->|
# This means that, subject should stop here ---->|


# <body> (optional)
# Explain how the commit addresses the issue
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|
# This means that, each line in the body should wrap here ------------>|


# IMPORTANT!! Describe any side effects of the change.


# <links/references> (optional)
# Provide links or keys to any relevant tickets, articles or other 
# resources
# Examples: "Issue [ABC-123]" or "Closes Github issue #123"

# --- COMMIT END ---
# ----------------------------------------------------------------------
# Type can be 
#   feat     (new feature)
#   fix      (bug fix)
#   refactor (refactoring production code)
#   style    (formatting, missing semi colons, etc; no code change)
#   docs     (changes to documentation)
#   test     (adding or refactoring tests; no production code change)
#   chore    (updating grunt tasks etc; no production code change)
#   wip      (work in progress commit to be squashed -- do not push!)**
# ----------------------------------------------------------------------
# Remember to
#   - Capitalize the subject line
#   - Use the imperative mood in the subject line
#   - Do not end the subject line with a period
#   - Answer the "If applied, this commit will..." in the subject
#   - Separate subject from body with a blank line
#   - Use the body to explain what and why vs. how
#   - Can use multiple lines with "-" for bullet points in body.
# ----------------------------------------------------------------------
# ** wip commit type
#   A wip commit should only happen on a local branch. These commits are 
#   for unfinished snapshots that should not be checked into a shared 
#   branch. These commits should be squashed before changes are merged
#   to a shared branch.
# ----------------------------------------------------------------------
# Example 1
#
# FEAT: Add matrix multiplication support to engine math
#
# This commit will add support for matrix multiplication. Specifically
# matrix to matrix multiplication and vector to matrix multiplication.
# The implementation has been made by overloading the * operator which
# in turn calls the corresponding multiply()-function based on the 
# multiplication performed.
#
# See Issue: ....
#
# ----------------------------------------------------------------------
#
